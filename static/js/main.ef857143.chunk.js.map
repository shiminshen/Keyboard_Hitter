{"version":3,"sources":["ScoreBoard.js","lib.js","Keyboard.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","_templateObject","ScoreBoard","_ref","score","addScore","react_default","a","createElement","alphabet","Keyboard_templateObject","Row","_templateObject2","FirstRow","_templateObject3","SecondRow","_templateObject4","ThirdRow","_templateObject5","Button","_templateObject6","props","highlight","KEYBORAD_MAP","Keyboard","_useState","useState","_useState2","Object","slicedToArray","buttonStatus","setButtonStatus","intervalRef","useRef","clearHighlightButton","letter","valid","arguments","length","undefined","currentTimer","clearTimeout","objectSpread","defineProperty","useEffect","id","setInterval","addKeys","n","Array","fill","map","Math","floor","random","getRandomLetter","reduce","R","V","randomLetter","setTimeout","current","handleKeyDown","e","key","document","addEventListener","clearInterval","removeEventListener","Keyboard_Wrapper","I","onClick","Title","App_templateObject","ControlPanel","App_templateObject2","Boolean","window","location","hostname","match","ReactDOM","render","setScore","_useState3","_useState4","status","setStatus","_useState5","_useState6","timeCountdown","setTimeCountdown","s","type","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef857143.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  font-size: 30px;\n`\n\nexport default ({ score, addScore }) => {\n  return <Wrapper>Score: {score}</Wrapper>\n}\n","const alphabet = [\n  'a',\n  'b',\n  'c',\n  'd',\n  'e',\n  'f',\n  'g',\n  'h',\n  'i',\n  'j',\n  'k',\n  'l',\n  'm',\n  'n',\n  'o',\n  'p',\n  'q',\n  'r',\n  's',\n  't',\n  'u',\n  'v',\n  'w',\n  'x',\n  'y',\n  'z'\n]\n\nexport const getRandomLetter = (n = 1) =>\n  Array(n)\n    .fill(n)\n    .map(() => alphabet[Math.floor(Math.random() * alphabet.length)])\n","import React, { useRef, useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { getRandomLetter } from './lib'\n\nconst Wrapper = styled.div`\n  max-width: 600px;\n  margin: 0 auto;\n  padding: 20px;\n`\n\nconst Row = styled.div`\n  display: flex;\n\n  & + & {\n    margin-top: 8px;\n  }\n`\n\nconst FirstRow = styled(Row)`\n  margin-top: 8px;\n  padding: 0 20px;\n`\n\nconst SecondRow = styled(Row)`\n  margin-top: 8px;\n  padding: 0 40px;\n`\n\nconst ThirdRow = styled(Row)`\n  margin-top: 8px;\n  padding: 0 60px;\n`\n\nconst Button = styled.div`\n  height: 48px;\n  width: 48px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: ${props => (props.highlight ? '#eee' : '#aaa')};\n  border-radius: 5px;\n  font-size: 24px;\n\n  & + & {\n    margin-left: 8px;\n  }\n`\n\nconst KEYBORAD_MAP = [\n  ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n  ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'],\n  ['z', 'x', 'c', 'v', 'b', 'n', 'm']\n]\n\nexport default ({ addScore }) => {\n  const [buttonStatus, setButtonStatus] = useState({})\n  const intervalRef = useRef()\n\n  const clearHighlightButton = (letter, valid = false) => {\n    const currentTimer = buttonStatus[letter]\n    if (valid) {\n      addScore(currentTimer ? 1 : -1)\n    }\n\n    clearTimeout(currentTimer)\n    setButtonStatus(buttonStatus => ({\n      ...buttonStatus,\n      [letter]: null\n    }))\n  }\n\n  useEffect(() => {\n    const setClearHighlightTimer = randomLetter =>\n      setTimeout(\n        () => clearHighlightButton(randomLetter),\n        Math.floor(Math.random() * 3000)\n      )\n\n    const id = setInterval(() => {\n      const randomLetters = getRandomLetter(Math.floor(Math.random() * 3))\n      const addKeys = randomLetters.reduce((R, V) => {\n        if (!buttonStatus[V]) {\n          R[V] = setClearHighlightTimer(V)\n        }\n        return R\n      }, {})\n      setButtonStatus(buttonStatus => ({\n        ...buttonStatus,\n        ...addKeys\n      }))\n    }, Math.floor(Math.random() * 700))\n    intervalRef.current = id\n\n    const handleKeyDown = e => clearHighlightButton(e.key, true)\n    document.addEventListener('keydown', handleKeyDown)\n    return () => {\n      clearInterval(intervalRef.current)\n      document.removeEventListener('keydown', handleKeyDown)\n    }\n  })\n\n  return (\n    <Wrapper>\n      <FirstRow>\n        {KEYBORAD_MAP[0].map(I => (\n          <Button\n            key={I}\n            highlight={buttonStatus[I]}\n            onClick={() => clearHighlightButton(I)}\n          >\n            {I}\n          </Button>\n        ))}\n      </FirstRow>\n      <SecondRow>\n        {KEYBORAD_MAP[1].map(I => (\n          <Button\n            key={I}\n            highlight={buttonStatus[I]}\n            onClick={() => clearHighlightButton(I)}\n          >\n            {I}\n          </Button>\n        ))}\n      </SecondRow>\n      <ThirdRow>\n        {KEYBORAD_MAP[2].map(I => (\n          <Button\n            key={I}\n            highlight={buttonStatus[I]}\n            onClick={() => clearHighlightButton(I)}\n          >\n            {I}\n          </Button>\n        ))}\n      </ThirdRow>\n    </Wrapper>\n  )\n}\n","import React, { useRef, useState, useEffect } from 'react'\nimport styled from 'styled-components'\n\nimport ScoreBoard from './ScoreBoard'\nimport Keyboard from './Keyboard'\n\nconst Title = styled.div`\n  margin: 8px 0;\n  display: flex;\n  justify-content: center;\n  font-size: 40px;\n`\n\nconst ControlPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\n\nconst TIME_COUNT_DOWN_MAX = 30\n\nexport default () => {\n  const intervalRef = useRef()\n  const [score, setScore] = useState(0)\n  const [status, setStatus] = useState(false)\n  const [timeCountdown, setTimeCountdown] = useState(TIME_COUNT_DOWN_MAX)\n  const addScore = (s = 1) => setScore(score + s)\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      if (timeCountdown === 0) {\n        setStatus(false)\n      }\n\n      if (status && timeCountdown > 0) {\n        setTimeCountdown(timeCountdown - 1)\n      }\n    }, 1000)\n    intervalRef.current = id\n    return () => {\n      clearInterval(intervalRef.current)\n    }\n  })\n\n  return (\n    <div>\n      <Title>Keyboard Hitter</Title>\n      <ControlPanel>\n        <div>Time: {timeCountdown}s</div>\n        <button\n          type='button'\n          onClick={() => {\n            setStatus(true)\n            setTimeCountdown(TIME_COUNT_DOWN_MAX)\n            setScore(0)\n          }}\n        >\n          {status ? 'Restart' : 'Start'}\n        </button>\n      </ControlPanel>\n      <ScoreBoard score={score} addScore={addScore} />\n      {status && <Keyboard addScore={addScore} />}\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}